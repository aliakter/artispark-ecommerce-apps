import 'dart:convert';

List<OrderModel> orderModelFromJson(String str) =>
    List<OrderModel>.from(json.decode(str).map((x) => OrderModel.fromJson(x)));

String orderModelToJson(List<OrderModel> data) =>
    json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class OrderModel {
  int id;
  String adId;
  String userId;
  String name;
  dynamic orderId;
  String email;
  String phone;
  String amount;
  String city;
  String zipcode;
  String address;
  dynamic status;
  dynamic transactionId;
  dynamic planId;
  dynamic currency;
  dynamic number;
  dynamic totalPrice;
  dynamic paymentStatus;
  dynamic snapToken;
  DateTime createdAt;
  DateTime updatedAt;
  Product product;

  OrderModel({
    required this.id,
    required this.adId,
    required this.userId,
    required this.name,
    required this.orderId,
    required this.email,
    required this.phone,
    required this.amount,
    required this.city,
    required this.zipcode,
    required this.address,
    required this.status,
    required this.transactionId,
    required this.planId,
    required this.currency,
    required this.number,
    required this.totalPrice,
    required this.paymentStatus,
    required this.snapToken,
    required this.createdAt,
    required this.updatedAt,
    required this.product,
  });

  factory OrderModel.fromJson(Map<String, dynamic> json) => OrderModel(
        id: json["id"],
        adId: json["ad_id"],
        userId: json["user_id"],
        name: json["name"],
        orderId: json["order_id"],
        email: json["email"],
        phone: json["phone"],
        amount: json["amount"],
        city: json["city"],
        zipcode: json["zipcode"],
        address: json["address"],
        status: json["status"],
        transactionId: json["transaction_id"],
        planId: json["plan_id"],
        currency: json["currency"],
        number: json["number"],
        totalPrice: json["total_price"],
        paymentStatus: json["payment_status"],
        snapToken: json["snap_token"],
        createdAt: DateTime.parse(json["created_at"]),
        updatedAt: DateTime.parse(json["updated_at"]),
        product: Product.fromJson(json["product"]),
      );

  Map<String, dynamic> toJson() => {
        "id": id,
        "ad_id": adId,
        "user_id": userId,
        "name": name,
        "order_id": orderId,
        "email": email,
        "phone": phone,
        "amount": amount,
        "city": city,
        "zipcode": zipcode,
        "address": address,
        "status": status,
        "transaction_id": transactionId,
        "plan_id": planId,
        "currency": currency,
        "number": number,
        "total_price": totalPrice,
        "payment_status": paymentStatus,
        "snap_token": snapToken,
        "created_at": createdAt.toIso8601String(),
        "updated_at": updatedAt.toIso8601String(),
        "product": product.toJson(),
      };
}

class Product {
  int id;
  String title;
  String slug;
  String userId;
  String categoryId;
  dynamic subcategoryId;
  dynamic brandId;
  dynamic brandName;
  String price;
  String description;
  String phone;
  bool showPhone;
  String showEmail;
  dynamic email;
  dynamic phone2;
  String thumbnail;
  String status;
  String featured;
  String isFeatured;
  String totalReports;
  String totalViews;
  String isBlocked;
  dynamic draftedAt;
  DateTime createdAt;
  DateTime updatedAt;
  String address;
  dynamic neighborhood;
  dynamic locality;
  dynamic place;
  dynamic district;
  dynamic postcode;
  dynamic region;
  dynamic country;
  dynamic long;
  dynamic lat;
  String whatsapp;
  dynamic serviceTypeId;
  dynamic designationId;
  dynamic productModelId;
  dynamic experience;
  dynamic educations;
  dynamic salaryFrom;
  dynamic salaryTo;
  dynamic deadline;
  dynamic employerName;
  dynamic condition;
  dynamic authenticity;
  dynamic ram;
  dynamic edition;
  dynamic processor;
  dynamic trimEdition;
  dynamic yearOfManufacture;
  dynamic engineCapacity;
  dynamic transmission;
  dynamic registrationYear;
  dynamic bodyType;
  dynamic fuelType;
  dynamic propertyType;
  dynamic size;
  dynamic sizeType;
  dynamic propertyLocation;
  dynamic priceType;
  dynamic animalType;
  dynamic employerLogo;
  dynamic employerWebsite;
  dynamic employmentType;
  dynamic bedroom;
  String isColloborate;
  String isChallenge;
  DateTime? challengeLastDate;
  String imageUrl;
  bool isWishlist;

  Product({
    required this.id,
    required this.title,
    required this.slug,
    required this.userId,
    required this.categoryId,
    required this.subcategoryId,
    required this.brandId,
    required this.brandName,
    required this.price,
    required this.description,
    required this.phone,
    required this.showPhone,
    required this.showEmail,
    required this.email,
    required this.phone2,
    required this.thumbnail,
    required this.status,
    required this.featured,
    required this.isFeatured,
    required this.totalReports,
    required this.totalViews,
    required this.isBlocked,
    required this.draftedAt,
    required this.createdAt,
    required this.updatedAt,
    required this.address,
    required this.neighborhood,
    required this.locality,
    required this.place,
    required this.district,
    required this.postcode,
    required this.region,
    required this.country,
    required this.long,
    required this.lat,
    required this.whatsapp,
    required this.serviceTypeId,
    required this.designationId,
    required this.productModelId,
    required this.experience,
    required this.educations,
    required this.salaryFrom,
    required this.salaryTo,
    required this.deadline,
    required this.employerName,
    required this.condition,
    required this.authenticity,
    required this.ram,
    required this.edition,
    required this.processor,
    required this.trimEdition,
    required this.yearOfManufacture,
    required this.engineCapacity,
    required this.transmission,
    required this.registrationYear,
    required this.bodyType,
    required this.fuelType,
    required this.propertyType,
    required this.size,
    required this.sizeType,
    required this.propertyLocation,
    required this.priceType,
    required this.animalType,
    required this.employerLogo,
    required this.employerWebsite,
    required this.employmentType,
    required this.bedroom,
    required this.isColloborate,
    required this.isChallenge,
    required this.challengeLastDate,
    required this.imageUrl,
    required this.isWishlist,
  });

  factory Product.fromJson(Map<String, dynamic> json) => Product(
        id: json["id"],
        title: json["title"],
        slug: json["slug"],
        userId: json["user_id"],
        categoryId: json["category_id"],
        subcategoryId: json["subcategory_id"],
        brandId: json["brand_id"],
        brandName: json["brand_name"],
        price: json["price"],
        description: json["description"],
        phone: json["phone"] ?? '',
        showPhone: json["show_phone"],
        showEmail: json["show_email"],
        email: json["email"],
        phone2: json["phone_2"],
        thumbnail: json["thumbnail"],
        status: json["status"],
        featured: json["featured"],
        isFeatured: json["is_featured"],
        totalReports: json["total_reports"],
        totalViews: json["total_views"],
        isBlocked: json["is_blocked"],
        draftedAt: json["drafted_at"],
        createdAt: DateTime.parse(json["created_at"]),
        updatedAt: DateTime.parse(json["updated_at"]),
        address: json["address"],
        neighborhood: json["neighborhood"],
        locality: json["locality"],
        place: json["place"],
        district: json["district"],
        postcode: json["postcode"],
        region: json["region"],
        country: json["country"],
        long: json["long"],
        lat: json["lat"],
        whatsapp: json["whatsapp"] ?? '',
        serviceTypeId: json["service_type_id"],
        designationId: json["designation_id"],
        productModelId: json["product_model_id"],
        experience: json["experience"],
        educations: json["educations"],
        salaryFrom: json["salary_from"],
        salaryTo: json["salary_to"],
        deadline: json["deadline"],
        employerName: json["employer_name"],
        condition: json["condition"],
        authenticity: json["authenticity"],
        ram: json["ram"],
        edition: json["edition"],
        processor: json["processor"],
        trimEdition: json["trim_edition"],
        yearOfManufacture: json["year_of_manufacture"],
        engineCapacity: json["engine_capacity"],
        transmission: json["transmission"],
        registrationYear: json["registration_year"],
        bodyType: json["body_type"],
        fuelType: json["fuel_type"],
        propertyType: json["property_type"],
        size: json["size"],
        sizeType: json["size_type"],
        propertyLocation: json["property_location"],
        priceType: json["price_type"],
        animalType: json["animal_type"],
        employerLogo: json["employer_logo"],
        employerWebsite: json["employer_website"],
        employmentType: json["employment_type"],
        bedroom: json["bedroom"],
        isColloborate: json["is_colloborate"],
        isChallenge: json["is_challenge"],
        challengeLastDate: json["challenge_last_date"] == null
            ? null
            : DateTime.parse(json["challenge_last_date"]),
        imageUrl: json["image_url"],
        isWishlist: json["is_wishlist"],
      );

  Map<String, dynamic> toJson() => {
        "id": id,
        "title": title,
        "slug": slug,
        "user_id": userId,
        "category_id": categoryId,
        "subcategory_id": subcategoryId,
        "brand_id": brandId,
        "brand_name": brandName,
        "price": price,
        "description": description,
        "phone": phone,
        "show_phone": showPhone,
        "show_email": showEmail,
        "email": email,
        "phone_2": phone2,
        "thumbnail": thumbnail,
        "status": status,
        "featured": featured,
        "is_featured": isFeatured,
        "total_reports": totalReports,
        "total_views": totalViews,
        "is_blocked": isBlocked,
        "drafted_at": draftedAt,
        "created_at": createdAt.toIso8601String(),
        "updated_at": updatedAt.toIso8601String(),
        "address": address,
        "neighborhood": neighborhood,
        "locality": locality,
        "place": place,
        "district": district,
        "postcode": postcode,
        "region": region,
        "country": country,
        "long": long,
        "lat": lat,
        "whatsapp": whatsapp,
        "service_type_id": serviceTypeId,
        "designation_id": designationId,
        "product_model_id": productModelId,
        "experience": experience,
        "educations": educations,
        "salary_from": salaryFrom,
        "salary_to": salaryTo,
        "deadline": deadline,
        "employer_name": employerName,
        "condition": condition,
        "authenticity": authenticity,
        "ram": ram,
        "edition": edition,
        "processor": processor,
        "trim_edition": trimEdition,
        "year_of_manufacture": yearOfManufacture,
        "engine_capacity": engineCapacity,
        "transmission": transmission,
        "registration_year": registrationYear,
        "body_type": bodyType,
        "fuel_type": fuelType,
        "property_type": propertyType,
        "size": size,
        "size_type": sizeType,
        "property_location": propertyLocation,
        "price_type": priceType,
        "animal_type": animalType,
        "employer_logo": employerLogo,
        "employer_website": employerWebsite,
        "employment_type": employmentType,
        "bedroom": bedroom,
        "is_colloborate": isColloborate,
        "is_challenge": isChallenge,
        "challenge_last_date":
            "${challengeLastDate!.year.toString().padLeft(4, '0')}-${challengeLastDate!.month.toString().padLeft(2, '0')}-${challengeLastDate!.day.toString().padLeft(2, '0')}",
        "image_url": imageUrl,
        "is_wishlist": isWishlist,
      };
}
